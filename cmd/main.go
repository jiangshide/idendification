package main

import "idendification/core"

/**
	1.什么是区块链：区块链是一个分布式数据库，具备分布式存储,分布式记录,去中心化,分布式维护等
	1.1.区块链1.0可编程货币:数字化货币及支付系统
	1.2.区块链2.0可编程金融:股票,清算,私募,股权等金融领域
	1.3.区块链3.0可编程社会:公证,仲裁,审计,物流,医疗等领域
	2.区块链核心技术:
	2.1.密码学和数字签名用于身份地址标识
	2.2.共识算法用于工作量证明
	2.3.分布式存储技术用于存储交易记录和区块,分布式网路技术用于网络通信和节点发现
	3.区块链本质
	3.1.区块链是一个分布式数据库
	3.2.区块链是公开的数据库,不是私人的数据库
	3.3.区块链是加密货币和智能合约的基础
	4.实现区块链的结构
	4.1.在区块链中,存储有效信息的是区块
	4.2.Timestamp是当前时间戳,也就是区块创建时间
	4.3.PrevBlockHash存储的是前一区块的哈希值
	4.4.Data是区块存储的实际有效的信息
	4.5.Hash是当前本区块的哈希值
	5.区块组成链式结构
	5.1.区块链是有着特定结构的数据库,一个有序后向连接的列表
	5.2.区块按照插入的顺序进行存储,每个块都被连接到前一个快
	5.3.快速的获取链上的最新块,并且高效的通过哈希来检索一个快
	6.工作量证明
	6.1.什么是工作量证明
	6.1.1.工作的结果作为数据加入区块链成为一个区块
	6.1.2.完成这个工作的人也会获得奖励(这个也就是通过挖矿获得比特币)
	6.1.3.整个"努力工作并进行证明"的机制,就叫做工作量证明
	7.为什么采用哈希算法
	7.1.不可逆:无法从一个哈希值恢复原始数据,哈希并不是加密
	7.2.唯一性:对于特定的数据，只能有一个哈希,并且这个哈希是唯一的
	7.3.防篡改:改变输入数据中的一个字节,导致输出一个完全不同的哈希
	8.哈希算特性
	8.1.正向快速:给定明文和hash算法,在有限时间和有限资源内能计算处hash值
	8.2.逆向困难:给定hash值,在有限时间内很难逆向推出明文
	8.3.输入敏感:原始输入信息修改一点信息,产生的hash值看起来应该都有很大不同
	8.4.冲突避免:很难找到两段内容不同的明文,使得他们的hash值一致(发生冲突)
	9.交易记账
	9.1.交易机制
	9.1.1.区块链能够安全可靠的存储交易结果
	9.1.2.在区块链中，交易一旦被创建，就没有任何人能够再去修改或删除
	9.1.3.交易由一些输入(input)和输出(output)组合而来

	区块链的Go语言的开源项目
	1.Go Ethereum 是官方使用Go语言实现的以太坊协议
	2.金融领域的区块链项目Chain
	3.Hyperledger Fabric:基于区块链的开源分布式	账本
 */
func main() {
	//bc := core.NewBlockChain()
	//bc.AddBlock("Send 1 BTC to Ivan")
	//bc.AddBlock("Send 2 more BTC to Ivan")
	//for _,block := range bc.Blocks{
	//	fmt.Printf("Prev.hash:%x\n",block.PreBlockHash)
	//	fmt.Printf("Data:%s\n",block.Data)
	//	fmt.Printf("Hash:%x\n",block.Hash)
	//	fmt.Println()
	//
	//	pow := core.NewProofOfWork(block)
	//	fmt.Printf("Pow:%s\n",strconv.FormatBool(pow.Validate()))
	//	fmt.Println()
	//}

	bc := core.NewBlockChain()
	defer bc.Db.Close()

	cli := core.CLI{bc}
	cli.Run()
}